diff -rcNP ./kernel_original/arch/x86/syscalls/syscall_32.tbl ./kernel_modified/arch/x86/syscalls/syscall_32.tbl
*** ./kernel_original/arch/x86/syscalls/syscall_32.tbl	2017-06-17 10:44:31.000000000 -0700
--- ./kernel_modified/arch/x86/syscalls/syscall_32.tbl	2017-11-28 06:22:56.118947000 -0800
***************
*** 365,367 ****
--- 365,370 ----
  356	i386	memfd_create		sys_memfd_create
  357	i386	bpf			sys_bpf
  358	i386	execveat		sys_execveat			stub32_execveat
+ 359	i386	barrier_init		sys_barrier_init
+ 360	i386	barrier_wait		sys_barrier_wait
+ 361	i386	barrier_destroy		sys_barrier_destroy
diff -rcNP ./kernel_original/barrier/barrier_driver.c ./kernel_modified/barrier/barrier_driver.c
*** ./kernel_original/barrier/barrier_driver.c	1969-12-31 16:00:00.000000000 -0800
--- ./kernel_modified/barrier/barrier_driver.c	2017-11-28 09:22:35.550743000 -0800
***************
*** 0 ****
--- 1,216 ----
+ //--------------------------INCLUDE HEADER FILES---------------------------------
+ #include<linux/module.h>
+ #include<linux/init.h>
+ #include<linux/kernel.h>
+ #include<linux/types.h>
+ #include<linux/cdev.h>
+ #include<linux/fs.h> //for various structures related to files(e.g.fops)
+ #include<linux/device.h>
+ #include<asm/uaccess.h> //for copy_from_user and copy_to user functions
+ #include<linux/moduleparam.h>
+ #include <linux/ioctl.h> //for ioctl
+ #include <linux/version.h> //for LINUX_VERSION_CODE and KERNEL_VERSION Macros
+ #include <linux/errno.h> //Linux system errors
+ #include <linux/rbtree.h>
+ #include <linux/slab.h>
+ #include <linux/mutex.h>
+ #include <linux/list.h>
+ #include <linux/delay.h>
+ #include <linux/spinlock.h>
+ #include <linux/time.h>
+ #include <linux/math64.h>
+ #include <linux/ktime.h>
+ #include <linux/sched.h>
+ //--------------------------DECLARATIONS AND DEFINITIONS---------------------------------
+ struct timeval t0,t1;
+ struct mutex mutexLock; //creating mutex object
+ long unsigned int temp, usec_diff;
+ unsigned long long timeouttemp;
+ ktime_t start, end;
+ unsigned long long actual_time;
+ int flag; 
+ int barrierIds=0;
+ static struct list_head barrierheadinit;
+ static LIST_HEAD(barrierheadinit);
+ unsigned long long int T1,T2;
+ EXPORT_SYMBOL_GPL(barrierheadinit);
+ 
+ //-------------- Function Declarations ------------------------------------------
+ 
+ typedef struct barrierInit {
+ 	int id;
+ 	unsigned long long timeout;
+ 	} barrier_sync;
+ 
+ static spinlock_t lock_list;
+ static spinlock_t lock_bid;
+ 
+ typedef struct thread_barrier  //each barrier has barrier_id, number_of_threads left to reach barrier, total_num_of_threads using this barrier, timeout value, curr_val to track if all thread reached the barrier
+ {
+ 	unsigned int barrier_id;
+ 	unsigned int threads_left;
+ 	unsigned int num_threads;
+ 	signed int timeout;
+ 	unsigned int curr_val;
+ 	struct list_head barrier_head;
+ 	spinlock_t lock_left;
+ 	int timedOut;
+ } thread_barrier_t;
+ 
+ //function that performs the barrier destroy of the id passed
+ asmlinkage long sys_barrier_destroy(unsigned int barrier_id)
+ {
+ 	thread_barrier_t *cur_barrier, *tmp_barrier;
+ 
+ 	printk(KERN_INFO "%s: called by PID: %d for Barrier-id: %d\n",__FUNCTION__, current->pid, barrier_id);
+ 	cur_barrier = NULL;
+ 	tmp_barrier = NULL;
+ 	spin_lock(&lock_list);
+ 	list_for_each_entry(tmp_barrier, &barrierheadinit, barrier_head)	//iterating through the list to get the corresponding barrier
+ 	{
+ 	 if(tmp_barrier->barrier_id == barrier_id)
+ 		{
+ 		printk(KERN_INFO "%s:  Thread %d :	Barrier id %d found in global list\n",__FUNCTION__,current->pid,tmp_barrier->barrier_id);
+ 		cur_barrier = tmp_barrier;
+ 		}
+ 		
+ 	}
+ 	spin_unlock(&lock_list);
+ 	if(cur_barrier == NULL)		//incase the barrier doesn't exist
+ 	{
+ 		printk(KERN_INFO "%s:  Thread %d :	ERROR!! Barrier id %d not found in list\n",__FUNCTION__,current->pid,tmp_barrier->barrier_id );
+ 		return -1;
+ 	}
+ 
+ 	if (cur_barrier->threads_left == cur_barrier->num_threads)	//condition which shows that the barrier is ready to be destroyed afte the synchronizatons
+ 		{ 
+ 		printk(KERN_INFO "%s:  Thread %d :	Barrier not used, destroying barrier ID %d\n",__FUNCTION__,current->pid,cur_barrier->barrier_id);//NOT BUSY
+ 		spin_lock(&lock_list);
+ 		list_del(&(cur_barrier->barrier_head));		//delete the corresponding barrier structure
+ 		spin_unlock(&lock_list);
+ 		kfree(cur_barrier);
+ 		printk(KERN_INFO "%s:  Thread %d :	Barrier destroyed \n", __FUNCTION__, current->pid);
+ 	}
+ 	else //barrier busy
+ 	{
+ 		printk(KERN_INFO "%s:  Thread %d :   Barrier is busy, cannot destroy barrier ID %d\n",__FUNCTION__, current->pid, cur_barrier->barrier_id);
+ 		return -1;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ //function that performs the barrier wait for the corresponding id
+ asmlinkage long sys_barrier_wait(unsigned int barrier_id)
+ {
+ 	//unsigned int my_num_threads;
+ 	thread_barrier_t *cur_barrier, *tmp_barrier;
+ 	
+ 	cur_barrier = NULL;
+ 	tmp_barrier = NULL;
+ 
+ 	printk("%s:   called by PID: %d for Barrier-id: %d\n", __FUNCTION__, current->pid, barrier_id);
+ 	spin_lock(&lock_list);
+ 	list_for_each_entry(tmp_barrier, &barrierheadinit, barrier_head){	//iterating through the list to get the corresponding barrier
+ 	if(tmp_barrier->barrier_id == barrier_id)	//if barrier is found
+ 	{
+ 		printk(KERN_INFO "%s: Thread: %d Barrier id %d found in global list\n",__FUNCTION__, current->pid, tmp_barrier->barrier_id);
+ 		cur_barrier = tmp_barrier;
+ 		}
+ 	}
+ 	spin_unlock(&lock_list);
+ 	if(cur_barrier == NULL){	//incase the barrier doesn't exist
+ 		printk(KERN_INFO "%s: Thread: %d ERROR!! Barrier id %d  not found in list\n",__FUNCTION__, current->pid, cur_barrier->barrier_id);
+ 		return -1;
+ 		}
+ 	if(cur_barrier->timedOut == 1)	//if the barrier has already timeedout, just return
+ 	{
+ 		printk(KERN_INFO "%s: Thread: %d ERROR!! Barrier id %d  TIMED OUT\n",__FUNCTION__, current->pid, cur_barrier->barrier_id);
+ 		return -1;
+ 	}
+ 	spin_lock(&(cur_barrier->lock_left));
+ 	cur_barrier->threads_left--; //when a thread arrives here decrement this
+ 	printk(KERN_INFO"%s: Thread: %d: Threads left  %d\n",__FUNCTION__, current->pid,cur_barrier->threads_left);
+ 	if(cur_barrier->threads_left == 0) //all threads arrived here
+ 	{	
+ 		printk("All threads arrived barrier ID: %d\n", cur_barrier->barrier_id);
+ 		printk("Incrementing cur value barrier ID: %d\n", cur_barrier->barrier_id);
+ 		cur_barrier->curr_val++; //flag come out of the while loop
+ 		printk("%s: Thread: %d:   exited while loop Barrier id: %d   threads left: %d\n", __FUNCTION__, current->pid, cur_barrier->barrier_id, cur_barrier->threads_left);
+ 		cur_barrier->threads_left = cur_barrier->num_threads; 	//resetting the flag for next synchronisation
+ 		spin_unlock(&(cur_barrier->lock_left));
+ 		return 0;
+ 	}
+ 	
+ 	else
+ 	{
+ 		unsigned int my_val;
+ 		int flag=0;
+ 		my_val = cur_barrier->curr_val;		//flag to detect that all threads have reached the barrier
+ 		while(my_val == cur_barrier->curr_val)
+ 			{
+ 			printk("%s: Thread: %d:   Waiting inside while barrier ID: %d\n", __FUNCTION__, current->pid, cur_barrier->barrier_id);
+ 			if(cur_barrier->threads_left == cur_barrier->num_threads-1 && flag ==0)	//start timer only when the first thread reaches
+ 			{
+ 				flag=1;
+ 				start = ktime_get();//do_gettimeofday(&t0);
+ 			}
+ 			spin_unlock(&(cur_barrier->lock_left));
+ 			if(cur_barrier->timeout != -1 && cur_barrier->timeout != 0)	//handling timeout values incase of -1 or 0 for no timeout cases
+ 			{		
+ 				timeouttemp=cur_barrier->timeout;
+ 				msleep(do_div(timeouttemp,5000000));
+ 			}
+ 			else
+ 				msleep(1000);		//fixed sleep time of 1 second for -1 or 0 as timeout values
+ 			end = ktime_get();
+ 			actual_time = ktime_to_ns(ktime_sub(end, start));	//get elapsed time in nanoseconds since we input timeout in nanoseconds
+ 
+ 			if(cur_barrier->curr_val > my_val)	//if barrier synchronization has already reached, return first n-1 threads
+ 			{
+ 				printk("%s: Thread: %d:   exited while loop Barrier id: %d   threads left: %d\n", __FUNCTION__, current->pid, cur_barrier->barrier_id, cur_barrier->threads_left);
+ 				return 0;
+ 			}
+ 			else if(actual_time >= cur_barrier->timeout && cur_barrier->timeout != -1 && cur_barrier->timeout != 0){	//incase of barrier timeout
+ 					printk(KERN_INFO "%s: Thread: %d:  Barrier id: %d  Timeout exceeded!! Exit\n", __FUNCTION__, current->pid, cur_barrier->barrier_id);
+ 					printk("%s: Thread: %d:   exited while loop Barrier id: %d   threads left: %d\n", __FUNCTION__, current->pid, cur_barrier->barrier_id, cur_barrier->threads_left);
+ 					spin_lock(&(cur_barrier->lock_left));
+ 					cur_barrier->threads_left = cur_barrier->num_threads;	//reset the flag
+ 					cur_barrier->timedOut = 1;	//set the flag as timedout to further prevent processing of the barrier
+ 					spin_unlock(&(cur_barrier->lock_left));
+ 					return -1;
+ 				}
+ 			}
+ 		
+ 	}
+ 	
+ 	return 0;
+ 
+ }
+ 
+ //function that performs the barrier initialization
+ asmlinkage long sys_barrier_init(unsigned int count, unsigned int *barrier_id, signed int timeout)
+ {
+ 	thread_barrier_t *ptr_barrier;
+ 	ptr_barrier = kmalloc(sizeof(thread_barrier_t), GFP_KERNEL);
+ 
+ 	spin_lock(&lock_bid);
+ 	barrierIds = barrierIds + 1;	//incrementing the global variable for each new id
+ 	*barrier_id = barrierIds;
+ 	ptr_barrier->barrier_id = barrierIds;	//updating the id value
+ 	spin_unlock(&lock_bid);
+ 	
+ 	ptr_barrier->num_threads = count;	//setting the thread count value
+ 	ptr_barrier->timeout = timeout;		//setting the timeout value
+ 	ptr_barrier->threads_left = count;	//setting the flag to number of threads
+ 	ptr_barrier->curr_val = 0;		//resetting the flag
+ 	ptr_barrier->timedOut = 0;		//resetting the timed out flag
+ 	INIT_LIST_HEAD(&ptr_barrier->barrier_head);	//setting the list header
+ 	spin_lock(&lock_list);
+ 	list_add(&ptr_barrier->barrier_head, &barrierheadinit);		//adding the new barrier to the list
+ 	spin_unlock(&lock_list);
+ 	printk(KERN_INFO "team 19: BARRIER SYNC INIT\n");
+ 	printk(KERN_INFO"%s: Thread: %d:       Barrier initialization completed with barrier_id = %d for %d threads with barrier timeout %d\n", __FUNCTION__, current->pid, ptr_barrier->barrier_id, 	ptr_barrier->num_threads, ptr_barrier->timeout);
+ 	return 0;
+ }
+ 
diff -rcNP ./kernel_original/barrier/barrier_driver.h ./kernel_modified/barrier/barrier_driver.h
*** ./kernel_original/barrier/barrier_driver.h	1969-12-31 16:00:00.000000000 -0800
--- ./kernel_modified/barrier/barrier_driver.h	2017-11-28 07:47:52.054851000 -0800
***************
*** 0 ****
--- 1,3 ----
+ asmlinkage long sys_barrier_init(unsigned int count, unsigned int *barrier_id, signed int timeout);
+ asmlinkage long sys_barrier_wait(unsigned int barrier_id);
+ asmlinkage long sys_barrier_destroy(unsigned int barrier_id);
diff -rcNP ./kernel_original/barrier/Makefile ./kernel_modified/barrier/Makefile
*** ./kernel_original/barrier/Makefile	1969-12-31 16:00:00.000000000 -0800
--- ./kernel_modified/barrier/Makefile	2017-11-28 06:25:22.330944000 -0800
***************
*** 0 ****
--- 1 ----
+ obj-y := barrier_driver.o
diff -rcNP ./kernel_original/include/linux/syscalls.h ./kernel_modified/include/linux/syscalls.h
*** ./kernel_original/include/linux/syscalls.h	2017-06-17 10:44:57.000000000 -0700
--- ./kernel_modified/include/linux/syscalls.h	2017-11-28 09:07:35.906760000 -0800
***************
*** 882,885 ****
--- 882,889 ----
  			const char __user *const __user *argv,
  			const char __user *const __user *envp, int flags);
  
+ asmlinkage long sys_barrier_init(unsigned int count, unsigned int *barrier_id, signed int timeout);
+ asmlinkage long sys_barrier_wait(unsigned int barrier_id);
+ asmlinkage long sys_barrier_destroy(unsigned int barrier_id);
+ 
  #endif
diff -rcNP ./kernel_original/Makefile ./kernel_modified/Makefile
*** ./kernel_original/Makefile	2017-06-17 10:44:24.000000000 -0700
--- ./kernel_modified/Makefile	2017-11-28 06:33:08.838936000 -0800
***************
*** 879,885 ****
  
  
  ifeq ($(KBUILD_EXTMOD),)
! core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/
  
  vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
  		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
--- 879,885 ----
  
  
  ifeq ($(KBUILD_EXTMOD),)
! core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/ barrier/
  
  vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
  		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
